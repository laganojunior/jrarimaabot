#include "error.h"
#include <iostream>
#include <sstream>
#include <string>

using namespace std;

//////////////////////////////////////////////////////////////////////////////
//basic constructor, initializes the internal string to some initial string,
//which is empty by default
//////////////////////////////////////////////////////////////////////////////
Error :: Error(string errorString)
{
    errorStringStream << errorString;
}

//////////////////////////////////////////////////////////////////////////////
//copy constructor
//////////////////////////////////////////////////////////////////////////////
Error :: Error(const Error& copy)
{
    errorStringStream.str(copy.errorStringStream.str());
}

//////////////////////////////////////////////////////////////////////////////
//deconstructor, does nothing.
//////////////////////////////////////////////////////////////////////////////
Error :: ~Error()
{

}

//////////////////////////////////////////////////////////////////////////////
//operator to append a string to an existing error object
//////////////////////////////////////////////////////////////////////////////
Error&      operator<<(Error& error, string add)
{

    error.errorStringStream << add;

    return error;
}

//////////////////////////////////////////////////////////////////////////////
//operator to append a character to an existing error object's string
//////////////////////////////////////////////////////////////////////////////
Error&      operator<<(Error& error, char add)
{
    error.errorStringStream << add;
    
    return error;
}

//////////////////////////////////////////////////////////////////////////////
//operator to append an integer to an existing error object's string
//////////////////////////////////////////////////////////////////////////////
Error&      operator<<(Error& error, int i)
{
    error.errorStringStream << i;

    return error;
}

//////////////////////////////////////////////////////////////////////////////
//operator to display an error object's internal string
//////////////////////////////////////////////////////////////////////////////
ostream&    operator<<(ostream& out, Error& error)
{
    out << error.errorStringStream.str();
    return out;
}

